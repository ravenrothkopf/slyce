fst : (Bool * Bool) -> Bool
fst = \p . let (x,y) = p in x

snd : (Bool * Bool) -> Bool
snd = \z . let (x,y) = z in y

flip : (Bool * Bool) -> (Bool * Bool)
flip = \p . let (x,y) = p in (y,x)

q : (Bool * Bool)
q = (True, False)

q' : (b:Bool * Bool)
q' = flip q

#t : Bool
#t = fst q

f : Bool
f = snd q
